
# Merge Sort and Inversion Counting Script

This Python script demonstrates an efficient algorithm for counting the number of inversions in an array using a modified version of the merge sort algorithm. An inversion in an array `A` is a pair of indices `(i, j)` such that `i < j` and `A[i] > A[j]`. The script reads arrays of integers from an input file named `"Counting_Inversions_input.txt"`, counts the number of inversions in each array, and prints both the array and the count of inversions.

## Features

- **Merge Sort Algorithm**: Utilizes a divide-and-conquer strategy to efficiently sort an array. It divides the array into two halves, recursively sorts them, and then merges them.
- **Inversion Counting**: During the merge process, the algorithm also counts the number of inversions in the array. This is achieved by comparing elements across the divided halves.
- **File Input**: Reads arrays of integers from a text file, where each line represents a separate array.
- **Output**: Prints the original array and the number of inversions found in it.

## How It Works

The script defines two main functions: `merge()` and `merge_sort_and_count_inversions()`. 

- `merge()`: Merges two sorted subarrays (`A[left..mid]` and `A[mid+1..right]`) and counts the number of inversions during the merge process.
- `merge_sort_and_count_inversions()`: Recursively applies merge sort on the array and accumulates the inversion counts from both the recursive calls and the merge operation.

After defining these functions, the script reads input arrays from `"Counting_Inversions_input.txt"`, applies the merge sort and inversion counting algorithm on each array, and prints the results.

## Usage

Ensure you have Python installed on your system. Place the input file `"Counting_Inversions_input.txt"` in the same directory as the script. Each line in the input file should represent an array of integers separated by commas. Run the script using a Python interpreter. The script will output the arrays and their corresponding inversion counts to the console.

Example content of `"Counting_Inversions_input.txt"`:

```
1,9,6,4
1,9,6,4,3
1,9,6
```

Output:

```
Array: [1, 9, 6, 4]
Number of inversions: 3
Array: [1, 9, 6, 4, 3]
Number of inversions: 6
Array: [1, 9, 6]
Number of inversions: 2
```

